warnings()
warnings()
warnings()
warnings()
warnings()
applyByChunks <- function(x, fun, chunk) {
NChunks<-ceiling(dim(x)[1]/chunk)
mod<-(dim(x)[1])%%chunk
y<-array(NA,NChunks*chunk)
for (i in c(1:NChunks)){
if(i<NChunks) {
y[((i-1)*chunk)+1:i*chunk]<-apply(x[(((i-1)*chunk)+1):(i*chunk),],1,fun)
}
else{
lastChunk<-apply(x[(((i-1)*chunk)+1):mod,],1,fun)
length(lastChunk)<-chunk
y[((i-1)*chunk)+1:i*chunk]<-lastChunk
}
}
length(y)<-dim(x)[1]
return(y)
}
C_scores_total<-applyByChunks(t(C_scores),sum,500000)
source('C:/Users/david/git/ucl-analyser/analyse.r')
M_tilde<-(lM[[1]])[[2]]
M_pred<-M_tilde[,312,]
M_pred<-M_pred[11]
M_pred<-M_tilde[,312,]
M_pred<-M_pred[,11]
C_indices<-t(combn(which(M_pred > 4), 10))
C_scores<-t(combn(M_pred[which(M_pred > 4)],10))
C_scores_total<-applyByChunks(t(C_scores),sum,500000)
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
debugSource('C:/Users/david/git/ucl-analyser/analyse.r')
dim(x)[1]
debugSource('C:/Users/david/git/ucl-analyser/analyse.r')
debugSource('C:/Users/david/git/ucl-analyser/analyse.r')
debugSource('C:/Users/david/git/ucl-analyser/analyse.r')
debugSource('C:/Users/david/git/ucl-analyser/analyse.r')
length(((i-1)*chunk)+1:(i*chunk))
chunk
length((((i-1)*chunk)+1):(i*chunk))
source('C:/Users/david/git/ucl-analyser/analyse.r')
C_scores_total<-apply(C_scores,1,sum)
max(C_scores_total)
which(C_scores == 65)
C_scores_total<-rowSums(C_scores,1)
which(C_scores_total == 65)
C_indices[864732,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)
conn<-dbConnect(MySQL(), dbname = 'datamine', user = 'david', password = 'david', host = 'localhost')
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)
pIDs[C_indices[864732,]]
pIDs[C_indices[864735,]]
C_scores_total<-rowSums(C_scores,1)
C_score_max<-(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal]
print(pIDs[indices_optimal])
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)
print(pIDs[indices_optimal])
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)
print(pIDs[indices_optimal])
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
dims(M_pred<-M_tilde)
dims(M_tilde)
dim(M_tilde)
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
which(M_pred > Sthr)
source('C:/Users/david/git/ucl-analyser/analyse.r')
printOptimalTeam<-function(Sthr, Stat, lM, conn = dbConnect(MySQL(), dbname = 'datamine', user = 'david', password = 'david', host = 'localhost')) {
M_tilde<-(lM[[1]])[[2]]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[Stat]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
C_indices<-t(combn(which(M_pred > Sthr), 10))
C_scores<-t(combn(M_pred[which(M_pred > Sthr)],10))
#C_scores_total<-applyByChunks(C_scores,sum,500000)
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)
print(pIDs[indices_optimal])
dbDisconnect(conn)
}
printOptimalTeam(Sthr, Stat, lM)
printOptimalTeam(4, 11, lM)
source('C:/Users/david/git/ucl-analyser/analyse.r')
printOptimalTeam(3.9, 11, lM)
printOptimalTeam(4, 11, lM)
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
printOptimalTeam(4.1, 11, lM)
printOptimalTeam(4.2, 11, lM)
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
#Clear workspace
rm(list=ls())
#Function definitions
killDbConnections <- function () {
all_cons <- dbListConnections(MySQL())
print(all_cons)
for(con in all_cons)
+  dbDisconnect(con)
print(paste(length(all_cons), " connections killed."))
}
dbGetReferenceDB <- function() {
return(dbConnect(MySQL(),
dbname = 'datamine',
user = 'david',
password = 'david',
host = 'localhost')
)
}
dbGetPredictionsDB <- function() {
return(dbConnect(MySQL(),
dbname = 'predictions',
user = 'david',
password = 'david',
host = 'localhost')
)
}
dbUpdateAppearance <- function(pApp, conn, isTransient) {
pName<-(splitPID(pApp[1]))[1]; pTeam<-(splitPID(pApp[1]))[2]; pDorsal<-(splitPID(pApp[1]))[3]
query<-paste(
#c('_GS_', '_PC_', '_AP_', '_FS_', '_OFF_','_OF_','_AS_','_CP_','_FC_','_ON_' )
"REPLACE INTO appearances SET ",
"_GS_ = ", pApp[3], ", ",
"_PC_ = ", ifelse(is.na(pApp[4]), "NULL", pApp[4]), ", ",
"_AP_ = ", ifelse(is.na(pApp[5]), "NULL", pApp[5]), ", ",
"_FS_ = ", pApp[6], ", ",
"_OFF_ = ", pApp[7], ", ",
"_OF_ = ", pApp[8], ", ",
"_AS_ = ", ifelse(is.na(pApp[9]), "NULL", pApp[9]), ", ",
"_CP_ = ", ifelse(is.na(pApp[10]), "NULL", pApp[10]), ", ",
"_FC_ = ", ifelse(is.na(pApp[11]), "NULL", pApp[11]), ", ",
"_ON_ = ", pApp[12], ", ",
"_S2_ = ", ifelse(is.na(pApp[13]), "NULL", pApp[13]), ", ",
"_NAME_ = \"", pName, "\", ",
"_TEAM_ = ", pTeam, ", ",
"_D_ = ", pDorsal, ", ",
"_P_ = ", ifelse(isTransient, "0","1"), ", ",
"_GID_ = ",
"(",
" SELECT _ID_ FROM games ",
" WHERE _DATE_ = \"", pApp[2], "\" ",
" AND ",
"  (",
"   _HTID_ = ", pTeam, " OR ",
"   _ATID_ = ", pTeam,
"  )",
")",
sep = ""
)
#print(query)
dbGetQuery(conn, query)
}
dbUpdateAllAppearances <- function(conn, pIDs, pDates, start, end, transient, A) {
for (pIndex in 1:length(pIDs)) {
pID<-pIDs[pIndex]
pApps<-A[pIndex, which(apply(!is.na(A[pIndex,,]), 1, any)),]
pAppsD<-pDates[which(apply(!is.na(A[pIndex,,]), 1, any))]
stopifnot((dim(pApps))[1] == length(pAppsD))
pAppU<-data.frame(pid = array(pID, (dim(pApps))[1]),
pd = pAppsD,
pstat = pApps)
# print(paste("Index is ", pIndex))
# print(pID)
# print(pAppU)
if((dim(pAppU))[1] > 0) {
apply(pAppU, 1, dbUpdateAppearance, conn, ifelse(pIndex<transient, TRUE, FALSE))
}
else{
print(paste("Found no appearances for player ", pID))
}
}
}
dbGetPIDs <- function(conn, start, end, transient, nsamples = 10, conditions = "(1 = 1)") {
query<-paste (
"SELECT DISTINCT(CONCAT(_NAME_, '|', _TEAM_, '|', _D_)), _POS_ FROM",
"(",
" SELECT  a._NAME_, a._TEAM_, a._D_, a._POS_, count(*) AS _NAPP_ FROM appearances a, games g",
" WHERE a._GID_ = g._ID_ ",
" AND (_DATE_ BETWEEN \"", start, "\" AND \"", end, "\") ",
" AND ", conditions,
" GROUP BY _NAME_, _TEAM_, _D_ ",
") grp ",
"WHERE _NAPP_ > ", transient + nsamples,
sep = ""
)
#print(query)
rs<-dbGetQuery(conn,query)
return(list(rs[,1], rs[,2]))
}
dbGetPDates <- function(conn, start, end, transient, nsamples = 10) {
query<-paste (
"SELECT DISTINCT(_DATE_) FROM appearances a, games g",
"WHERE CONCAT(_NAME_, '|', _TEAM_, '|', _D_) IN ",
"(",
" SELECT DISTINCT(CONCAT(_NAME_, '|', _TEAM_, '|', _D_)) AS _PID_ FROM",
" (",
"  SELECT  _NAME_, _TEAM_, _D_, count(*) AS _NAPP_ FROM appearances a, games g ",
"  WHERE a._GID_ = g._ID_ AND (_DATE_ BETWEEN \"", start, "\" AND \"", end, "\") ",
"  GROUP BY _NAME_, _TEAM_, _D_ ",
" ) grp ",
" WHERE _NAPP_ > ", transient + nsamples,
")",
"AND a._GID_ = g._ID_ ",
"AND (_DATE_ BETWEEN \"", start, "\" AND \"", end, "\") ",
"ORDER BY _DATE_ ASC"
)
#print(query)
return((dbGetQuery(conn, query))[,1])
}
splitPID <- function(pID) {
return(unlist(splittedID<-strsplit(pID, "|", fixed = TRUE)))
}
dbGetPAppearances <- function(conn, pID, startDate, endDate) {
#Split pID into pName, pTeam and pDorsal
pName<-(splitPID(pID))[1]; pTeam<-(splitPID(pID))[2]; pDorsal<-(splitPID(pID))[3]
#Query the database for the records belonging in this one player
#Hint: print(query) to debug the query itself
query<-paste("SELECT _DATE_, _TEAM_, _NAME_, _GS_, _PC_, _AW_, _AP_, _FS_, _OFF_, _OF_, _AS_, _FC_, _ON_, _CP_, _S_ ",
"FROM appearances a JOIN games g ON a._GID_ = g._ID_ ",
"WHERE _NAME_ = \"", pName, "\" ",
"AND (_DATE_ BETWEEN \"", startDate, "\" AND \"", endDate, "\") ",
"AND _TEAM_ = ", pTeam, " ",
"AND _D_ = ", pDorsal, " ",
"ORDER BY _DATE_ ASC",
sep = "")
#print(query)
pApp_DF<-dbGetQuery(conn,query)
return(pApp_DF)
}
computeMovingAverage <- function(conn, startDate, endDate, transient, nsamples, conditions = "(1 = 1)") {
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples, conditions)[[1]]
pDates<-dbGetPDates(conn, startDate, endDate, transient, nsamples)
pDates[length(pDates)+1]<-as.character(Sys.Date())
NStat<-11
M<-array(NA,c(length(pIDs), length(pDates)-1, NStat))
M_tilde<-array(NA,c(length(pIDs), length(pDates), NStat))
C<-array(1/transient, c(transient))
for(pID in pIDs){
#Get all appearances for this player
pApp_DF<-dbGetPAppearances(conn, pID, startDate, endDate)
#print(query)
#Get the dates vector for this particular player. We must update de rows according
#to the relative position of this dates. We use 'which' to find the indices where
#such dates and pID appear in pIDs and pDates reference vectors.
pApp_Dates_DF<-pApp_DF[c('_DATE_')]
pApp_Dates_DF[(dim(pApp_Dates_DF))[1]+1,1]<-as.character(Sys.Date())
for(date in pApp_Dates_DF[-nrow(pApp_Dates_DF),1]) {
#Convert the data frame into a numeric matrix for computations
pApp_Stats_V<-data.matrix(pApp_DF[,c('_GS_', '_PC_', '_AP_', '_FS_', '_OFF_','_OF_','_AS_','_CP_','_FC_','_ON_','_S_' )])
#We shouldnt be finding histories shorter than length(C), since we required
#that the players we bring from the database have a longer history than 'memory' = lenght(C)
#If anyways we find one, stop execution
stopifnot((dim(pApp_Stats_V))[1] >= length(C))
pApp_Stats_V_tilde<-filter(pApp_Stats_V, C, method = 'convolution', sides = 1)
#Store history and predictions in the M matrices, having into accound the dates each
#record is refering to keep relative positions inside the matrices
M[which(pIDs == pID), which(pDates == date),]<-
pApp_Stats_V[which(pApp_Dates_DF == date),]
M_tilde[which(pIDs == pID), which(pDates == pApp_Dates_DF[which(pApp_Dates_DF == date)+1,1]),]<-
pApp_Stats_V_tilde[which(pApp_Dates_DF == date),]
}
}
return(list(M, M_tilde))
}
computeError <- function(lM) {
M<-lM[[1]]; M_tilde<-lM[[2]]
#Now we can start checking how good our predictions were by checking the difference
#between M and M_tilde
M_tilde_aligned = M_tilde[,-(dim(M_tilde))[2],]
return(E<-abs(M-M_tilde_aligned))
}
applyByChunks <- function(x, fun, chunk) {
NChunks<-ceiling(dim(x)[1]/chunk)
mod<-(dim(x)[1])%%chunk
y<-array(NA,NChunks*chunk)
for (i in c(1:NChunks)){
if(i<NChunks) {
y[((i-1)*chunk)+1:i*chunk]<-apply(x[(((i-1)*chunk)+1):(i*chunk),],1,fun)
}
else{
lastChunk<-apply(x[(((i-1)*chunk)+1):mod,],1,fun)
length(lastChunk)<-chunk
y[(((i-1)*chunk)+1):(i*chunk)]<-lastChunk
}
}
length(y)<-dim(x)[1]
return(y)
}
printOptimalTeam<-function(Sthr, Stat, lM, conn = dbConnect(MySQL(), dbname = 'datamine', user = 'david', password = 'david', host = 'localhost')) {
M_tilde<-(lM[[1]])[[2]]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[Stat]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
C_indices<-t(combn(which(M_pred > Sthr), 10))
C_scores<-t(combn(M_pred[which(M_pred > Sthr)],10))
#C_scores_total<-applyByChunks(C_scores,sum,500000)
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)[[1]]
print(pIDs[indices_optimal])
dbDisconnect(conn)
}
myconn<-dbGetReferenceDB()
lM<-computeMovingAverage(myconn, "2014-05-01", "2018-08-09", 7, 1)
printOptimalTeam(4, 11, lM[[2]] )
printOptimalTeam(4, 11, lM )
printOptimalTeam<-function(Sthr, Stat, M_tilde, conn = dbConnect(MySQL(), dbname = 'datamine', user = 'david', password = 'david', host = 'localhost')) {
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[Stat]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
C_indices<-t(combn(which(M_pred > Sthr), 10))
C_scores<-t(combn(M_pred[which(M_pred > Sthr)],10))
#C_scores_total<-applyByChunks(C_scores,sum,500000)
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)[[1]]
print(pIDs[indices_optimal])
dbDisconnect(conn)
}
printOptimalTeam(4, 11, lM[[2]] )
printOptimalTeam<-function(Sthr, Stat, M_tilde, conn = dbConnect(MySQL(), dbname = 'datamine', user = 'david', password = 'david', host = 'localhost')) {
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[Stat]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
C_indices<-t(combn(which(M_pred > Sthr), 10))
C_scores<-t(combn(M_pred[which(M_pred > Sthr)],10))
#C_scores_total<-applyByChunks(C_scores,sum,500000)
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)[[1]]
print(pIDs[indices_optimal])
dbDisconnect(conn)
}
printOptimalTeam(4, 11, lM[[2]] )
lM[[2]][,,ncol(lM)]
lM[[2]][1,,]
(lM[[2]])[1,,]
(lM[[2]])[1,115,]
(lM[[2]])[1,116,]
debugSource('C:/Users/david/git/ucl-analyser/analyse.r')
dim(M_tilde)[2]
Stat
source('C:/Users/david/git/ucl-analyser/analyse.r')
lM2<-computeMovingAverage(dbGetReferenceDB(), "2014-05-01", "2018-01-01", 7, 12, "_POS_ = 2")
printOptimalTeam(0, 11, lM2)
printOptimalTeam<-function(Sthr, Stat, lM, conn = dbConnect(MySQL(), dbname = 'datamine', user = 'david', password = 'david', host = 'localhost')) {
M_tilde<-lM[[2]]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
C_indices<-t(combn(which(M_pred > Sthr), 10))
C_scores<-t(combn(M_pred[which(M_pred > Sthr)],10))
#C_scores_total<-applyByChunks(C_scores,sum,500000)
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)[[1]]
print(pIDs[indices_optimal])
dbDisconnect(conn)
}
printOptimalTeam(0, 11, lM2)
printOptimalTeam<-function(Sthr, Stat, lM, C, conn = dbConnect(MySQL(), dbname = 'datamine', user = 'david', password = 'david', host = 'localhost')) {
M_tilde<-lM[[2]]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
C_indices<-t(combn(which(M_pred > Sthr), 10))
C_scores<-t(combn(M_pred[which(M_pred > Sthr)],10))
#C_scores_total<-applyByChunks(C_scores,sum,500000)
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)[[1]]
print(pIDs[indices_optimal])
dbDisconnect(conn)
}
printOptimalTeam<-function(Sthr, Stat, lM, C, conn = dbConnect(MySQL(), dbname = 'datamine', user = 'david', password = 'david', host = 'localhost')) {
M_tilde<-lM[[2]]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
C_indices<-t(combn(which(M_pred > Sthr), C))
C_scores<-t(combn(M_pred[which(M_pred > Sthr)],C))
#C_scores_total<-applyByChunks(C_scores,sum,500000)
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)[[1]]
print(pIDs[indices_optimal])
dbDisconnect(conn)
}
printOptimalTeam<-function(Sthr, Stat, lM, C, conn = dbConnect(MySQL(), dbname = 'datamine', user = 'david', password = 'david', host = 'localhost')) {
M_tilde<-lM[[2]]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
C_indices<-t(combn(which(M_pred > Sthr), C))
C_scores<-t(combn(M_pred[which(M_pred > Sthr)],C))
#C_scores_total<-applyByChunks(C_scores,sum,500000)
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples)[[1]]
print(pIDs[indices_optimal])
dbDisconnect(conn)
}
printOptimalTeam(0, 11, lM2, 5)
printOptimalTeam<-function(Sthr, Stat, lM, C, conditions = "(1 = 1)", conn = dbConnect(MySQL(), dbname = 'datamine', user = 'david', password = 'david', host = 'localhost')) {
M_tilde<-lM[[2]]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
M_pred<-M_tilde[,dim(M_tilde)[2],]
M_pred<-M_pred[,Stat]
C_indices<-t(combn(which(M_pred > Sthr), C))
C_scores<-t(combn(M_pred[which(M_pred > Sthr)],C))
#C_scores_total<-applyByChunks(C_scores,sum,500000)
C_scores_total<-rowSums(C_scores,1)
C_score_max<-max(C_scores_total)
index_optimal<-(which(C_scores_total == C_score_max))[1]
indices_optimal<-C_indices[index_optimal,]
pIDs<-dbGetPIDs(conn, startDate, endDate, transient, nsamples, conditions)[[1]]
print(pIDs[indices_optimal])
dbDisconnect(conn)
}
printOptimalTeam(0, 11, lM2, 5, "(_POS_ = 2)")
lM2<-computeMovingAverage(dbGetReferenceDB(), "2014-05-01", "2018-01-01", 7, 12, "_POS_ = 3")
printOptimalTeam(0, 11, lM2, 5, "(_POS_ = 3)")
lM2<-computeMovingAverage(dbGetReferenceDB(), "2014-05-01", "2018-01-01", 7, 12, "_POS_ = 4")
printOptimalTeam(0, 11, lM2, 5, "(_POS_ = 4)")
lM2<-computeMovingAverage(dbGetReferenceDB(), "2014-05-01", "2018-01-01", 4, 15, "_POS_ = 4")
printOptimalTeam(0, 11, lM2, 5, "(_POS_ = 4)")
killDbConnections()
printOptimalTeam(0, 11, lM2, 5, "(_POS_ = 4)")
printOptimalTeam(0, 11, lM2, 3, "(_POS_ = 4)")
lM2<-computeMovingAverage(dbGetReferenceDB(), "2014-05-01", "2018-01-01", 6, 15, "_POS_ = 4")
printOptimalTeam(0, 11, lM2, 3, "(_POS_ = 4)")
lM2<-computeMovingAverage(dbGetReferenceDB(), "2014-05-01", "2018-01-01", 7, 1, "_POS_ = 4")
printOptimalTeam(0, 11, lM2, 3, "(_POS_ = 4)")
debugSource('C:/Users/david/git/ucl-analyser/analyse.r')
debugSource('C:/Users/david/git/ucl-analyser/analyse.r')
which(C_scores_total == C_score_max)
pIDs[indices_optimal]
indices_optimal
pIDs[20]
pIDs[22]
pIDs[292]
pIDs[92]
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
lM2<-computeMovingAverage(dbGetReferenceDB(), "2014-05-01", "2018-01-01", 7, 1, "_POS_ = 3")
printOptimalTeam(0, 11, lM2, 5, pIDs = dbGetPIDs(
dbGetReferenceDB(),
"2014-05-01",
"2018-01-01",
7,
1,
"_POS_ = 3"
)[[1]]
)
source('C:/Users/david/git/ucl-analyser/analyse.r')
source('C:/Users/david/git/ucl-analyser/analyse.r')
P_for
