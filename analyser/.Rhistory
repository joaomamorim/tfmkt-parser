withScores =
cleanedSeason %>%
select(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_`, `_GC_`, `_GS_`, `_GSS_`, `_AS_`, `_YC_`, `_Y2_`, `_RC_`) %>%
# Group by player name and consolidate for each player in a nested table
group_by(`_PNAME_`) %>%
arrange(`_DATE_`) %>%
nest(.key = 'stats.real.tbl') %>%
# Calculate scores
updateScores() %>%
# Generate average score and N (number of samples)
mutate(
S_mean = map_dbl(scores.real.ary, mean, na.rm = TRUE),
Nsamples = map_int(stats.real.tbl, dplyr::count)
)
# Comment
withScores =
cleanedSeason %>%
select(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_`, `_GC_`, `_GS_`, `_GSS_`, `_AS_`, `_YC_`, `_Y2_`, `_RC_`) %>%
# Group by player name and consolidate for each player in a nested table
group_by(`_PNAME_`) %>%
arrange(`_DATE_`) %>%
nest(.key = 'stats.real.tbl') %>%
# Calculate scores
updateScores() %>%
# Generate average score and N (number of samples)
mutate(
S_mean = map_dbl(scores.real.ary, mean, na.rm = TRUE),
Nsamples = map_int(stats.real.tbl, function(x){return(length(x)[1])})
)
withScores
# Comment
withScores =
cleanedSeason %>%
select(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_`, `_GC_`, `_GS_`, `_GSS_`, `_AS_`, `_YC_`, `_Y2_`, `_RC_`) %>%
# Group by player name and consolidate for each player in a nested table
group_by(`_PNAME_`) %>%
arrange(`_DATE_`) %>%
nest(.key = 'stats.real.tbl') %>%
# Calculate scores
updateScores() %>%
# Generate average score and N (number of samples)
mutate(
S_mean = map_dbl(scores.real.ary, mean, na.rm = TRUE),
Nsamples = map_int(stats.real.tbl, function(x){return(length(x)[2])})
)
withScores
# Comment
withScores =
cleanedSeason %>%
select(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_`, `_GC_`, `_GS_`, `_GSS_`, `_AS_`, `_YC_`, `_Y2_`, `_RC_`) %>%
# Group by player name and consolidate for each player in a nested table
group_by(`_PNAME_`) %>%
arrange(`_DATE_`) %>%
nest(.key = 'stats.real.tbl') %>%
# Calculate scores
updateScores() %>%
# Generate average score and N (number of samples)
mutate(
S_mean = map_dbl(scores.real.ary, mean, na.rm = TRUE),
Nsamples = map_int(stats.real.ary, dplyr::count)
)
# Comment
withScores =
cleanedSeason %>%
select(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_`, `_GC_`, `_GS_`, `_GSS_`, `_AS_`, `_YC_`, `_Y2_`, `_RC_`) %>%
# Group by player name and consolidate for each player in a nested table
group_by(`_PNAME_`) %>%
arrange(`_DATE_`) %>%
nest(.key = 'stats.real.tbl') %>%
# Calculate scores
updateScores() %>%
# Generate average score and N (number of samples)
mutate(
S_mean = map_dbl(scores.real.ary, mean, na.rm = TRUE),
Nsamples = map_int(scores.real.ary, dplyr::count)
)
# Comment
withScores =
cleanedSeason %>%
select(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_`, `_GC_`, `_GS_`, `_GSS_`, `_AS_`, `_YC_`, `_Y2_`, `_RC_`) %>%
# Group by player name and consolidate for each player in a nested table
group_by(`_PNAME_`) %>%
arrange(`_DATE_`) %>%
nest(.key = 'stats.real.tbl') %>%
# Calculate scores
updateScores() %>%
# Generate average score and N (number of samples)
mutate(
S_mean = map_dbl(scores.real.ary, mean, na.rm = TRUE),
Nsamples = map_int(scores.real.ary, nrow)
)
nrow(c(1,2))
# Comment
withScores =
cleanedSeason %>%
select(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_`, `_GC_`, `_GS_`, `_GSS_`, `_AS_`, `_YC_`, `_Y2_`, `_RC_`) %>%
# Group by player name and consolidate for each player in a nested table
group_by(`_PNAME_`) %>%
arrange(`_DATE_`) %>%
nest(.key = 'stats.real.tbl') %>%
# Calculate scores
updateScores() %>%
# Generate average score and N (number of samples)
mutate(
S_mean = map_dbl(scores.real.ary, mean, na.rm = TRUE),
Nsamples = map_int(stats.real.tbl, nrow)
)
withScores
source('D:/git-playground/tfmkt-parser/analyser/R/functions.R')
# Import custom functions from 'R' folder
# Every new function needs to be defined in the
# functions.r file inside this folder
source("R/functions.R")
#####################################################
# MAIN
# Analyse appearances
#####################################################
# Imports
library(RMySQL)
library(dplyr)
library(zoo) # Requirement for rollapply windowing function
# Definitions
numeric_vars = vars(`_GS_`, `_GSS_`, `_AS_`, `_MIN_`, `_GC_` ,`_YC_`, `_RC_`, `_S_`)
relcolumns_prev = vars(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_`, `_GC_`, `_GS_`, `_GSS_`, `_AS_`, `_YC_`, `_Y2_`, `_RC2_`)
relcolumns_real = vars(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_.x`, `_GC_.x`, `_GS_.x`, `_GSS_.x`, `_AS_.x`, `_YC_.x`, `_Y2_.x`, `_RC2_.x`)
relcolumns_pred = vars(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_.y`, `_GC_.y`, `_GS_.y`, `_GSS_.y`, `_AS_.y`, `_YC_.y`, `_Y2_.y`, `_RC2_.y`)
# Connect to database
# Get 'raw' data
conn<-dbConnect(MySQL(), dbname = 'tfmkt', user = 'root', password = 'root', host = '192.168.56.102')
season_data = dplyr::as_tibble(dbGetQuery(conn, "SELECT * FROM tfmkt.appearances"))
dbDisconnect(conn)
# Clean out invalid rows and generate updated GC (Goals Condeeded)
# and S (Score) columns. Sub-set the input data to a given conditions
consolidated = consolidateTopN(season_data, top = 200, past = 10)
consolidated
# Import custom functions from 'R' folder
# Every new function needs to be defined in the
# functions.r file inside this folder
source("R/functions.R")
#####################################################
# MAIN
# Analyse appearances
#####################################################
# Imports
library(RMySQL)
library(dplyr)
library(zoo) # Requirement for rollapply windowing function
# Definitions
numeric_vars = vars(`_GS_`, `_GSS_`, `_AS_`, `_MIN_`, `_GC_` ,`_YC_`, `_RC_`, `_S_`)
relcolumns_prev = vars(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_`, `_GC_`, `_GS_`, `_GSS_`, `_AS_`, `_YC_`, `_Y2_`, `_RC2_`)
relcolumns_real = vars(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_.x`, `_GC_.x`, `_GS_.x`, `_GSS_.x`, `_AS_.x`, `_YC_.x`, `_Y2_.x`, `_RC2_.x`)
relcolumns_pred = vars(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_.y`, `_GC_.y`, `_GS_.y`, `_GSS_.y`, `_AS_.y`, `_YC_.y`, `_Y2_.y`, `_RC2_.y`)
# Connect to database
# Get 'raw' data
conn<-dbConnect(MySQL(), dbname = 'tfmkt', user = 'root', password = 'root', host = '192.168.56.102')
season_data = dplyr::as_tibble(dbGetQuery(conn, "SELECT * FROM tfmkt.appearances"))
dbDisconnect(conn)
# Clean out invalid rows and generate updated GC (Goals Condeeded)
# and S (Score) columns. Sub-set the input data to a given conditions
consolidated = consolidateTopN(season_data, top = 200, past = 10)
movedWAvg =
consolidated %>%
computeMovingPredictions(4, top = 100, pFUN = weighted.mean, na.rm = TRUE, w = rep(0.25,4)) %>%
updateScores()
# Import custom functions from 'R' folder
# Every new function needs to be defined in the
# functions.r file inside this folder
source("R/functions.R")
#####################################################
# MAIN
# Analyse appearances
#####################################################
# Imports
library(RMySQL)
library(dplyr)
library(zoo) # Requirement for rollapply windowing function
# Definitions
numeric_vars = vars(`_GS_`, `_GSS_`, `_AS_`, `_MIN_`, `_GC_` ,`_YC_`, `_RC_`, `_S_`)
relcolumns_prev = vars(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_`, `_GC_`, `_GS_`, `_GSS_`, `_AS_`, `_YC_`, `_Y2_`, `_RC2_`)
relcolumns_real = vars(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_.x`, `_GC_.x`, `_GS_.x`, `_GSS_.x`, `_AS_.x`, `_YC_.x`, `_Y2_.x`, `_RC2_.x`)
relcolumns_pred = vars(`_PNAME_`, `_DATE_`, `_POS_`,`_MIN_.y`, `_GC_.y`, `_GS_.y`, `_GSS_.y`, `_AS_.y`, `_YC_.y`, `_Y2_.y`, `_RC2_.y`)
# Connect to database
# Get 'raw' data
conn<-dbConnect(MySQL(), dbname = 'tfmkt', user = 'root', password = 'root', host = '192.168.56.102')
season_data = dplyr::as_tibble(dbGetQuery(conn, "SELECT * FROM tfmkt.appearances"))
dbDisconnect(conn)
# Clean out invalid rows and generate updated GC (Goals Condeeded)
# and S (Score) columns. Sub-set the input data to a given conditions
consolidated = consolidateTopN(season_data, top = 200, past = 10)
movedWAvg =
consolidated %>%
computeMovingPredictions(4, top = 100, pFUN = weighted.mean, na.rm = TRUE, w = rep(0.25,4)) %>%
updateScores()
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
movedWAvg
movedWAvg %>% unnest()
movedWAvg %>% unnest(.id = "unn")
movedWAvg %>% unnest()
movedWAvg %>% unnest() %>% filter(`_PNAME_` == 'lionel-messi')
movedWAvg %>% unnest() %>% filter(`_PNAME_` == 'lionel-messi') %>% select(`_GS_`, `_GS_1`)
movedWAvg %>% unnest() %>% filter(`_PNAME_` == 'lionel-messi') %>% select(`_DATE_`, `_GS_`, `_GS_1`)
movedAvg =
consolidated %>%
computeMovingPredictions(4, top = 100, pFUN = mean, na.rm = TRUE) %>%
updateScores()
movedAvg %>% unnest() %>% filter(`_PNAME_` == 'lionel-messi') %>% select(`_DATE_`, `_GS_`, `_GS_1`)
mean(c(0,2,3,0))
mean(c(4,2,3,0))
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
movedAvg %>% unnest() %>% filter(`_PNAME_` == 'lionel-messi') %>% select(`_DATE_`, `_GS_`, `_GS_1`)
source('D:/git-playground/tfmkt-parser/analyser/R/functions.R')
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
movedAvg %>% unnest() %>% filter(`_PNAME_` == 'lionel-messi') %>% select(`_DATE_`, `_GS_`, `_GS_1`)
source('D:/git-playground/tfmkt-parser/analyser/R/functions.R')
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
movedAvg %>% unnest() %>% filter(`_PNAME_` == 'lionel-messi') %>% select(`_DATE_`, `_GS_`, `_GS_1`)
source('D:/git-playground/tfmkt-parser/analyser/R/functions.R')
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
movedAvg %>% unnest() %>% filter(`_PNAME_` == 'lionel-messi') %>% select(`_DATE_`, `_GS_`, `_GS_1`)
source('D:/git-playground/tfmkt-parser/analyser/R/functions.R')
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
movedAvg %>% unnest() %>% filter(`_PNAME_` == 'lionel-messi') %>% select(`_DATE_`, `_GS_`, `_GS_1`)
c(0,2,3,0) %>% mean()
c(0,2,3,4) %>% mean()
movedWAvg %>% unnest() %>% filter(`_PNAME_` == 'lionel-messi') %>% select(`_DATE_`, `_GS_`, `_GS_1`)
movedWAvg
source('D:/git-playground/tfmkt-parser/analyser/R/functions.R')
movedWAvg =
consolidated %>%
computeMovingPredictions(4, top = 100, pFUN = weighted.mean, na.rm = TRUE, w = rep(0.25,4)) %>%
updateRealScores() %>%
updatePredScores()
movedAvg =
consolidated %>%
computeMovingPredictions(4, top = 100, pFUN = mean, na.rm = TRUE) %>%
updateRealScores() %>%
updatePredScores()
movedAvg
movedAvg$scores.pred.ary
movedAvg
movedAvg %>% mutate(scores.pred.mean = map_dbl(stats.pred.ary, mean, na.rm = TRUE))
movedAvg %>% mutate(scores.pred.mean = map_dbl(scores.pred.ary, mean, na.rm = TRUE))
View(movedAvg)
View(movedAvg)
movedAvg %>% filter(`_PNAME_` == 'kamil-glik')
movedAvg %>% filter(`_PNAME_` == 'kamil-glik') %>% select(stats.real.tbl)
movedAvg %>% filter(`_PNAME_` == 'kamil-glik') %>% select(stats.real.tbl) %>% unnest
movedAvg %>% filter(`_PNAME_` == 'kamil-glik') %>% select(stats.real.tbl, scores.real.ary) %>% unnest
movedAvg %>% top_n(n = 10, wt = scores.pred.mean)
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
movedAvg
movedWAvg
movedAvg %>% top_n(n = 10, wt = scores.pred.mean)
movedAvg %>% top_n(n = 10, wt = scores.pred.mean) %>% arrange(scores.pred.mean)
movedAvg %>% top_n(n = 10, wt = scores.pred.mean) %>% arrange(desc(scores.pred.mean))
movedWAvg %>% top_n(n = 10, wt = scores.pred.mean) %>% arrange(desc(scores.pred.mean))
movedWAvg %>% top_n(n = 10, wt = scores.real.mean) %>% arrange(desc(scores.real.mean))
movedWAvg %>% mutate(err = stats.real.tbl - stats.pred.tbl)
movedAvg$stats.real.tbl
movedAvg$stats.real.tbl['_DATE_']
movedAvg$stats.real.tbl[[1]]
movedAvg$stats.real.tbl[[1]]$`_DATE_`:`_POS_`
movedAvg$stats.real.tbl[[1]] - movedAvg$stats.pred.tbl[[1]]
movedAvg %>% mutate(err = map(.x = stats.real.tbl, .f = ~ . - stats.pred.tbl))
movedAvg %>% mutate(err = map2(.x = stats.real.tbl, .y = stats.pred.tbl, .f = ~ .x - .y))
movedAvg %>% mutate(err = map2(.x = stats.real.tbl, .y = stats.pred.tbl, ~ .x - .y))
movedAvg %>% mutate(err = map2(stats.real.tbl, stats.pred.tbl, ~ .x - .y))
one = movedAvg$stats.pred.tbl[[1]]
two = movedAvg$stats.real.tbl[[1]]
one
two
one - two
one[-c('_DATE_')]
one[]
one[`_DATE_`]
one[c("_DATE_")]
one[-c("_DATE_")]
one
one[]
one[_DATE_]
one[`_DATE_``]
one[`_DATE_`]
one[`_DATE_`]
one$`_DATE_`
one[c("_DATE_")]
one[c("_DATE_":"_POS_")]
movedAvg %>% mutate(err = map2(stats.real.tbl, stats.pred.tbl, ~ as.matrix(select(.x, -(`_DATE_`))) - as.matrix(select(.y, -(`_DATE_`)))
)
)
movedAvg %>% mutate(err = map2(stats.real.tbl, stats.pred.tbl, ~ as.matrix(select(.x, -(`_DATE_`))) - as.matrix(select(.y, -(`_DATE_`)))))
movedAvg %>% mutate(err = map2(stats.real.tbl, stats.pred.tbl, ~ as.matrix(select(.x, -(`_DATE_`))) - as.matrix(select(.y, -(`_DATE_`))))) %>% select(err)
movedAvg %>% mutate(err = map2_tbl(stats.real.tbl, stats.pred.tbl, ~ as.matrix(select(.x, -(`_DATE_`))) - as.matrix(select(.y, -(`_DATE_`))))) %>% select(err)
movedAvg %>% mutate(err = map2_df(stats.real.tbl, stats.pred.tbl, ~ as.matrix(select(.x, -(`_DATE_`))) - as.matrix(select(.y, -(`_DATE_`))))) %>% select(err)
movedAvg
movedAvg %>% mutate(dates = map_df(.$`_DATE`))
movedAvg %>% mutate(dates = map_df(~.$`_DATE`))
movedAvg %>% mutate(dates = map_df(stats.real.tbl,~.$`_DATE`))
movedAvg %>% mutate(dates = map(stats.real.tbl,~.$`_DATE`))
movedAvg %>% mutate(dates = map(stats.real.tbl,~.$`_DATE_`))
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
consolidated = consolidateTopN(season_data, top = 200, past = 10)
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
movedWAvg
eWAvg =
movedAvg %>%
transmute(
name = `_PNAME_`,
err = map2(stats.real.tbl, stats.pred.tbl, ~ (as.matrix(.x) - as.matrix(.y)) %>% abs())
)
eWAvg
eWAvg$err
eWAvg %>% unnest()
eWAvg %>% select(err) %>% unnest() %>% colMeans()
eWAvg %>% select(err) %>% unnest()
eWAvg %>% select(err)
movedAvg
movedAvg %>% unnest()
movedAvg
eWAvg
eWAvg %>% unnest()
eWAvg =
movedAvg %>%
transmute(
name = `_PNAME_`,
err = map2(stats.real.tbl, stats.pred.tbl, ~ (as.matrix(.x) - as.matrix(.y)) %>% abs() %>% dplyr::as_tibble())
)
eWAvg %>% unnest()
eWAvg %>% unnest() %>% select(-(`_PNAME_`))
eWAvg %>% unnest() %>% select(-(name))
eWAvg %>% unnest() %>% select(-(name)) %>% as.matrix() %>% colMeans()
eWAvg %>% unnest() %>% select(-(name)) %>% as.matrix() %>% colMeans(na.rm = TRUE)
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
eWAvg %>% unnest() %>% select(-(name)) %>% as.matrix() %>% colMeans(na.rm = TRUE)
eWAvg %>% unnest() %>% select(err) %>% as.matrix() %>% colMeans(na.rm = TRUE)
eWAvg %>% unnest() %>% select(err.wma.tbl) %>% as.matrix() %>% colMeans(na.rm = TRUE)
eWAvg %>% select(err.wma.tbl) %>% unnest() %>% as.matrix() %>% colMeans(na.rm = TRUE)
eAvg %>% select(err.ma.tbl) %>% unnest() %>% as.matrix() %>% colMeans(na.rm = TRUE)
movedAvg =
consolidated %>%
computeMovingPredictions(6, top = 200, pFUN = mean, na.rm = TRUE)
eAvg =
movedAvg %>%
mutate(
err.ma.tbl = map2(stats.real.tbl, stats.pred.tbl, ~ (as.matrix(.x) - as.matrix(.y)) %>% abs() %>% dplyr::as_tibble())
)
eAvg %>% select(err.ma.tbl) %>% unnest() %>% as.matrix() %>% colMeans(na.rm = TRUE)
eAvg %>% unnest()
eAvg %>% unnest() %>% select(scores.pred.mean) %>% mean()
eAvg %>% unnest() %>% select(scores.pred.mean)
eAvg %>% unnest() %>% select(scores.pred.mean) %>% transmute(m = mean(scores.pred.mean))
eAvg %>% unnest() %>% select(scores.pred.mean) %>%
)
eAvg$scores.pred.mean %>% mean()
eAvg$scores.pred.mean - eAvg$scores.real.mean
eAvg$scores.pred.mean - eAvg$scores.real.mean %>% mean()
(eAvg$scores.pred.mean - eAvg$scores.real.mean) %>% mean()
(abs(eAvg$scores.pred.mean - eAvg$scores.real.mean)) %>% mean()
(abs((movedWAvg %>% unnest())$`_S_`)
)
(abs((movedWAvg %>% unnest())$`_S_`))
eWAvg =
movedAvg %>%
mutate(
err.wma.tbl = map2(stats.real.tbl, stats.pred.tbl, ~ (as.matrix(.x) - as.matrix(.y)) %>% abs() %>% dplyr::as_tibble())
)
movedWAvg %>% unnest()
(abs((movedWAvg %>% unnest())$scores.real.ary))
(abs((movedWAvg %>% unnest())$scores.real.ary - (movedWAvg %>% unnest())$scores.pred.ary))
(abs((movedWAvg %>% unnest())$scores.real.ary - (movedWAvg %>% unnest())$scores.pred.ary)) %>% mean()
(abs((movedWAvg %>% unnest())$scores.real.ary - (movedWAvg %>% unnest())$scores.pred.ary)) %>% mean(rm.na = TRUE)
(abs((movedWAvg %>% unnest())$scores.real.ary - (movedWAvg %>% unnest())$scores.pred.ary)) %>% mean(na.rm = TRUE)
(abs((movedAvg %>% unnest())$scores.real.ary - (movedAvg %>% unnest())$scores.pred.ary)) %>% mean(na.rm = TRUE)
movedWAvg =
consolidated %>%
computeMovingPredictions(6, top = 200, pFUN = weighted.mean, na.rm = TRUE, w = c(5,5,3,3,2,1)/19)
eWAvg =
movedAvg %>%
mutate(
err.wma.tbl = map2(stats.real.tbl, stats.pred.tbl, ~ (as.matrix(.x) - as.matrix(.y)) %>% abs() %>% dplyr::as_tibble())
)
(abs((movedWAvg %>% unnest())$scores.real.ary - (movedWAvg %>% unnest())$scores.pred.ary)) %>% mean(na.rm = TRUE)
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
(abs((movedWAvg %>% unnest())$scores.real.ary - (movedWAvg %>% unnest())$scores.pred.ary)) %>% mean(na.rm = TRUE)
movedWAvg =
consolidated %>%
computeMovingPredictions(6, top = 200, pFUN = weighted.mean, na.rm = TRUE, w = c(10,5,10,5,10,5)/45)
eWAvg =
movedAvg %>%
mutate(
err.wma.tbl = map2(stats.real.tbl, stats.pred.tbl, ~ (as.matrix(.x) - as.matrix(.y)) %>% abs() %>% dplyr::as_tibble())
)
(abs((movedWAvg %>% unnest())$scores.real.ary - (movedWAvg %>% unnest())$scores.pred.ary)) %>% mean(na.rm = TRUE)
movedWAvg =
consolidated %>%
computeMovingPredictions(6, top = 200, pFUN = weighted.mean, na.rm = TRUE, w = c(10,0,10,0,10,0)/30)
eWAvg =
movedAvg %>%
mutate(
err.wma.tbl = map2(stats.real.tbl, stats.pred.tbl, ~ (as.matrix(.x) - as.matrix(.y)) %>% abs() %>% dplyr::as_tibble())
)
(abs((movedWAvg %>% unnest())$scores.real.ary - (movedWAvg %>% unnest())$scores.pred.ary)) %>% mean(na.rm = TRUE)
movedWAvg
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
sum(10:1)
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
(abs((movedWAvg %>% unnest())$scores.real.ary - (movedWAvg %>% unnest())$scores.pred.ary)) %>% mean(na.rm = TRUE)
(abs((movedAvg %>% unnest())$scores.real.ary - (movedAvg %>% unnest())$scores.pred.ary)) %>% mean(na.rm = TRUE)
sum(c(10,10,10,8,8,8,5,5,5,2))
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
(abs((movedWAvg %>% unnest())$scores.real.ary - (movedWAvg %>% unnest())$scores.pred.ary)) %>% mean(na.rm = TRUE)
approx(c(10,10,10,8,8,8,5,5,5,2))
approx(x = c(10,10,10,8,8,8,5,5,5,2))
approx(x = c(10,10,10,8,8,8,5,5,5,2), y = NULL)
approx(x = c(10,10,10,8,8,8,5,5,5,2), y = NULL, xout = 1)
approx(x = c(10,10,10,8,8,8,5,5,5,2), y = NULL, xout = 2)
approx( y = c(10,10,10,8,8,8,5,5,5,2), xout = 2)
approx( x = 1:10, y = c(10,10,10,8,8,8,5,5,5,2), xout = 2)
approx( x = 1:10, y = c(10,10,10,8,8,8,5,5,5,2), xout = 11)
approx( x = 1:10, y = c(10,10,10,8,8,8,5,5,5,2))
ets(c(10,10,10,8,8,8,5,5,5,2))
ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict()
(ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict())$Forecast
(ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict())[1]
(ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict())[1,]
(ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict())[,1]
(ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict(h=1))
class(ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict(h=1))
(ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict(h=1)) %>% as.data.frame()
res = (ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict(h=1)) %>% as.data.frame()
res$`Point Forecast`
(ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict(h=1)))$`Point Forecast`
((ets(c(10,10,10,8,8,8,5,5,5,2)) %>% predict(h=1)) %>% as.data.frame())$`Point Forecast`
((ets(c(10,10,10,8,8,8,5,5,5,2)) %>% forecast(h=1)) %>% as.data.frame())$`Point Forecast`
movedEts =
consolidated %>%
computeMovingPredictions(10, top = 200, pFUN = function(x){
fitted = ets(x)
prediction = forecast(fitted, h=1) %>% as.data.frame()
return(prediction$`Point Forecast`)
}
)
source('D:/git-playground/tfmkt-parser/analyser/run_analysis.R')
movedEts =
consolidated
install.packages('fbRanks')
library('fbRanks')
data(B00data)
B00.scores
rank.teams(scores = B00.scores, teams = B00.teams)
rank.teams(scores = B00.scores, teams = B00.teams) -> ranked_teams
B00.scores
scores_only = B00.scores[,1:5]
scores_only
rank.teams(scores = scores_only, teams = B00.teams) -> ranked_teams
B00.teams
only_names = B00.teams['names']
only_names = B00.teams[c('names')]
only_names = B00.teams[c('name')]
only_names
B00.teams
only_names = B00.teams[c('club')]
rank.teams(scores = scores_only, teams = only_names) -> ranked_teams
rank.teams(scores = scores_only) -> ranked_teams
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% select(`_DATE_`, `_HT_`, `_GSH_`, `_AT_`, `_GSA_`)
games
games %>% filter(`_HT_` == 'fc-barcelona')
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% select(`_DATE_`, `_HT_`, `_GSH_`, `_AT_`, `_GSA_`) %>% filter(row_number() == 1)
games %>% filter(`_HT_` == 'fc-barcelona')
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% select(`_DATE_`, `_HT_`, `_GSH_`, `_AT_`, `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup()
games %>% filter(`_HT_` == 'fc-barcelona')
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% select(`_DATE_`, `_HT_`, `_GSH_`, `_AT_`, `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(`_DATE_``)
)
``
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% select(`_DATE_`, `_HT_`, `_GSH_`, `_AT_`, `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(`_DATE_`)
games %>% filter(`_HT_` == 'fc-barcelona')
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% select(`_DATE_`, `_HT_`, `_GSH_`, `_AT_`, `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(desc(`_DATE_`))
games %>% filter(`_HT_` == 'fc-barcelona')
formatted_games = games %>% as.data.frame()
formatted_games = (games %>% as.data.frame())[,2:]
formatted_games = (games %>% as.data.frame())[,-1]
formatted_games
names(scores_only)
names(formatted_games) <- c("date", "home.team", "home.score", "away.team", "away.score")
rank.teams(scores = formatted_games)
scores_only
class(scores_only)
formatted_games
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% select(as.date(`_DATE_`), `_HT_`, `_GSH_`, `_AT_`, `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(desc(`_DATE_`))
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% mutate( date = as.Date(`_DATE_`, format="%Y-%m-d"), home.team = `_HT_`, home.score = `_GSH_`, away.team = `_AT_`, away.score`_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(desc(date))
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% mutate( date = as.Date(`_DATE_`, format="%Y-%m-d"), home.team = `_HT_`, home.score = `_GSH_`, away.team = `_AT_`, away.score = `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(desc(date))
games
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% mutate( date = as.Date(`_DATE_`, format="%Y-%m-d"), home.team = `_HT_`, home.score = `_GSH_`, away.team = `_AT_`, away.score = `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(desc(date)) %>% select(date, home.team, home.score, away.team)
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% mutate( date = as.Date(`_DATE_`, format="%Y-%m-d"), home.team = `_HT_`, home.score = `_GSH_`, away.team = `_AT_`, away.score = `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(desc(date)) %>% select(date, home.team, home.score, away.team, away.score)
games
games = season_data %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% mutate( date = as.Date(`_DATE_`, format="%Y-%m-%d"), home.team = `_HT_`, home.score = `_GSH_`, away.team = `_AT_`, away.score = `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(desc(date)) %>% select(date, home.team, home.score, away.team, away.score)
games
rank.teams(games)
rank.teams(games) -> ranked_tfmkt
ranked_tfmkt
games = season_data %>% filter(`_C_` == 'UCL') %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% mutate( date = as.Date(`_DATE_`, format="%Y-%m-%d"), home.team = `_HT_`, home.score = `_GSH_`, away.team = `_AT_`, away.score = `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(desc(date)) %>% select(date, home.team, home.score, away.team, away.score)
View(season_data)
View(season_data)
games = season_data %>% filter(`_C_` == 'CL') %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% mutate( date = as.Date(`_DATE_`, format="%Y-%m-%d"), home.team = `_HT_`, home.score = `_GSH_`, away.team = `_AT_`, away.score = `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(desc(date)) %>% select(date, home.team, home.score, away.team, away.score)
rank.teams(games) -> ranked_tfmkt
games = season_data %>% filter(`_C_` == 'ES1') %>% group_by(`_DATE_`, `_GID_`) %>% distinct() %>% mutate( date = as.Date(`_DATE_`, format="%Y-%m-%d"), home.team = `_HT_`, home.score = `_GSH_`, away.team = `_AT_`, away.score = `_GSA_`) %>% filter(row_number() == 1) %>% ungroup() %>% ungroup() %>% arrange(desc(date)) %>% select(date, home.team, home.score, away.team, away.score)
rank.teams(games)
ls
games
rank.teams(games) -> ranked_teams
fbRanks::predict.fbRanks(ranked_teams)
