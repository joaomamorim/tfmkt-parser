consolidated = consolidateTopN(data, top = 1000, past = 1)
# Import custom functions from 'R' folder
# Every new function needs to be defined in the
# functions.r file inside this folder
source("R/functions.R")
#####################################################
# Compute moving averages and add team ratings
#####################################################
# Imports
library(RMySQL)
library(tidyverse)
# Connect to database
# Get 'raw' data
conn<-dbConnect(MySQL(), dbname = 'tfmkt', user = 'david', password = 'david', host = 'localhost')
season_data = dplyr::as_tibble(dbGetQuery(conn, "SELECT * FROM tfmkt.appearances"))
dbDisconnect(conn)
# Only for LaLiga appearanances
data =
season_data %>%
# Filter out minor leages. Only rows from:
#  GB1 : Premier League
#  ES1 : La Liga
#  IT1 : Calccio
#  L1 : Bundesliga
#  FR1 : French league
#  PO1 : Portuguese League
#  UCL : Champions Leage
#  EL : Europa League
filter(`_C_` %in% c("ES1"))
# Top = 1000 actually bring in all players, since La Liga has around 350 different players
# Past = 1 means every player with at least 1 game played
consolidated = consolidateTopN(data, top = 1000, past = 1)
# Import custom functions from 'R' folder
# Every new function needs to be defined in the
# functions.r file inside this folder
source("R/functions.R")
#####################################################
# Compute moving averages and add team ratings
#####################################################
# Imports
library(RMySQL)
library(tidyverse)
# Connect to database
# Get 'raw' data
conn<-dbConnect(MySQL(), dbname = 'tfmkt', user = 'david', password = 'david', host = 'localhost')
season_data = dplyr::as_tibble(dbGetQuery(conn, "SELECT * FROM tfmkt.appearances"))
dbDisconnect(conn)
# Only for LaLiga appearanances
data =
season_data %>%
# Filter out minor leages. Only rows from:
#  GB1 : Premier League
#  ES1 : La Liga
#  IT1 : Calccio
#  L1 : Bundesliga
#  FR1 : French league
#  PO1 : Portuguese League
#  UCL : Champions Leage
#  EL : Europa League
filter(`_C_` %in% c("ES1"))
# Top = 1000 actually bring in all players, since La Liga has around 350 different players
# Past = 1 means every player with at least 1 game played
consolidated = consolidateTopN(data, top = 1000, past = 1)
flattened = unnest(consolidated)
View(consolidated)
View(flattened)
# Import custom functions from 'R' folder
# Every new function needs to be defined in the
# functions.r file inside this folder
source("R/functions.R")
#####################################################
# Compute moving averages and add team ratings
#####################################################
# Imports
library(RMySQL)
library(tidyverse)
# Connect to database
# Get 'raw' data
conn<-dbConnect(MySQL(), dbname = 'tfmkt', user = 'david', password = 'david', host = 'localhost')
season_data = dplyr::as_tibble(dbGetQuery(conn, "SELECT * FROM tfmkt.appearances"))
dbDisconnect(conn)
# Only for LaLiga appearanances
data =
season_data %>%
# Filter out minor leages. Only rows from:
#  GB1 : Premier League
#  ES1 : La Liga
#  IT1 : Calccio
#  L1 : Bundesliga
#  FR1 : French league
#  PO1 : Portuguese League
#  UCL : Champions Leage
#  EL : Europa League
filter(`_C_` %in% c("ES1"))
# Top = 1000 actually bring in all players, since La Liga has around 350 different players
# Past = 1 means every player with at least 1 game played
consolidated = consolidateTopN(data, top = 1000, past = 1)
flattened = unnest(consolidated)
View(flattened)
# Module the raw data into a dataframe that can be the input to the rank.teams function
games =
# From a season data dataframe (full 'appearances' table from the database)
unnest(consolidated) %>%
group_by(`_DATE_`, `_GID_`) %>%
# I beleive this call to distinct is not really necessary
distinct() %>%
# Create the columns date, home.team, away.team and scores as they are
# expected in the fbRanks.rank_teams function
mutate(
date = as.Date(stats.dates.ary, format="%Y-%m-%d"),
home.team = `_HT_`, home.score = `_GSH_`,
away.team = `_AT_`, away.score = `_GSA_`) %>%
# Take only the first row, since we are interested in the score of the
# game this is enough
filter(row_number() == 1) %>%
# Remove the grouping
ungroup() %>% ungroup() %>%
# order rows by date
arrange(desc(date)) %>%
# Drop unnecesary rows
select(date, home.team, home.score, away.team, away.score)
# Module the raw data into a dataframe that can be the input to the rank.teams function
games =
# From a season data dataframe (full 'appearances' table from the database)
unnest(consolidated) %>%
group_by(`_DATE_`, `_GID_`) %>%
# I beleive this call to distinct is not really necessary
distinct() %>%
# Create the columns date, home.team, away.team and scores as they are
# expected in the fbRanks.rank_teams function
mutate(
date = as.Date(`_DATE_`, format="%Y-%m-%d"),
home.team = `_HT_`, home.score = `_GSH_`,
away.team = `_AT_`, away.score = `_GSA_`) %>%
# Take only the first row, since we are interested in the score of the
# game this is enough
filter(row_number() == 1) %>%
# Remove the grouping
ungroup() %>% ungroup() %>%
# order rows by date
arrange(desc(date)) %>%
# Drop unnecesary rows
select(date, home.team, home.score, away.team, away.score)
source('C:/Users/david/git/tfmkt-parser/analyser/create_ratediff_column.R')
source('C:/Users/david/git/tfmkt-parser/analyser/create_ratediff_column.R')
View(games)
View(games)
library(fbRanks)
ranks = rank.teams(games)
ranks = rank.teams(games %>% filter(date < as.Date("2017-08-25")))
ranks = rank.teams(games %>% filter(date < as.Date("2017-09-25")))
ranks = rank.teams(games %>% filter(date < as.Date("2017-08-25")))
ranks = rank.teams(games %>% filter(date < as.Date("2017-09-10")))
ranks = rank.teams(games %>% filter(date < as.Date("2017-09-25")))
View(games)
View(games)
View(consolidated)
View(consolidated)
View(flattened)
View(flattened)
consolidated
View(flattened)
flatten()
flattened
test = flattened %>% nest()
test
test = flattened %>% nest(-`_DATE_`)
test
flatten()
flattened
flattened %>% group_by(`_DATE_`) %>% mutate( all_rows = nest())
flattened %>% group_by(`_DATE_`) %>% mutate( all_rows = nest(.))
flattened %>% group_by(`_DATE_`) %>% mutate( all_rows = nest(.))
flattened %>% mutate(all_rows = nest())
flattened %>% mutate(all_rows = nest(.))
flattened %>% mutate(all_rows = flattened)
flattened %>% mutate(all_rows = nest(flattened)
)
flattened %>% mutate(all_rows = map(nest(flattened))
)
flattened %>% mutate(all_rows = map(nest(flattened), ~ select()))
flattened %>% mutate(all_rows = map(nest(flattened), ~ select(.)))
flattened %>% mutate(all_rows = map(nest(flattened), ~ .)
)
test = flattened %>% mutate(all_rows = map(nest(flattened), ~ .))
View(test)
View(test)
test = flattened %>% mutate(all_rows = map(flattened, ~ .))
flattened %>% mutate(all_rows = map(nest(flattened), ~ .) %>% select(all_rows) %>% unnest()
)
0
0
0
flattened %>% mutate(all_rows = map(nest(flattened), ~ .)) %>% select(all_rows) %>% unnest()
flattened %>% mutate(all_rows = map(nest(flattened), ~ .)) %>% select(all_rows)
flattened %>% mutate(all_rows = map(nest(.), ~ .)) %>% select(all_rows)
(flattened %>% mutate(all_rows = map(nest(.), ~ .)) %>% select(all_rows))[[1]]
(flattened %>% mutate(all_rows = map(nest(.), ~ .)) %>% select(all_rows))$all_rows[[1]]
flattened %>% mutate(all_rows = map(nest(.), ~ .)) %>% mutate(fitted = rank.teams(all_rows))
source('C:/Users/david/git/tfmkt-parser/analyser/create_ratediff_column.R')
source('C:/Users/david/git/tfmkt-parser/analyser/create_ratediff_column.R')
source('C:/Users/david/git/tfmkt-parser/analyser/run_analysis.R')
source('C:/Users/david/git/tfmkt-parser/analyser/create_ratediff_column.R')
source('C:/Users/david/git/tfmkt-parser/analyser/create_ratediff_column.R')
dates
apply(dates, 1, rank.teams, games, max.date = .)
apply(dates, 1, rank.teams, games)
apply(dates, 1, function(x){rank.teams(games, max.date = x)})
source('C:/Users/david/git/tfmkt-parser/analyser/create_ratediff_column.R')
source('C:/Users/david/git/tfmkt-parser/analyser/create_ratediff_column.R')
fitter = apply(dates, 1, function(x){rank.teams(games, max.date = (x - 1))})
fitter = apply(dates, 1, function(x){rank.teams(games, max.date = x )})
fitter = apply(dates, 1, function(x){rank.teams(games, max.date = x , silent = TRUE})
fitter = apply(dates, 1, function(x){rank.teams(games, max.date = x , silent = TRUE)})
view(fitter)
rank.teams(games)
games
si = rank.teams(games)
si
si$fit
si$scores
si$teams
si$fit
si$fit$cluster.1
rank.teams(games)
si$fit$cluster.1$R
si$fit$cluster.1$coefficients
si$fit$cluster.1$fitted.values
si$fit$cluster.1$data
si$fit$cluster.1$rank
si$fit$cluster.1$family
si$fit$cluster.1$coefficients
si$fit$cluster.1$R
si$fit$cluster.1$linear.predictors
si$fit$cluster.1$model
si$fit$cluster.1$rank
si$fit$cluster.1$rank
si$fit$cluster.1$R
View(si)
print(si)
coef(si)
oto = coef(si)
oto$coef.list
oto$coef.list$cluster.1$attack
si$teams
si$fit
si$scores
si$scores
si$scores %>% view()
view(si$scores)
otor = si$scores
View(otor)
View(otor)
si
otor = si$scores
otoe
otor
coef(si).list
coef.list = coef(si)$coef.list
coef.list
coef.list$[[1]]
coef.list[[1]]
coef.list[[1]]$attack
res=coef.list[[1]]$attack
res$celta-vigo
as.data.frame(res)
si$fit$cluster.1$coefficients
si$fit$cluster.1$coefficients$attack
si$fit$cluster.1$coefficients %>% as.data.frame()
si$fit$cluster.1$coefficient
si$fit$cluster.1$coefficient %>% as.data.frame()
fitter =
apply(dates, 1, function(x){rank.teams(games, max.date = (x - 1))}) %>%
as.tibble()
fitter =
apply(dates, 1, function(x){rank.teams(games, max.date = (x - 1))}) %>%
coef()
# Fits the 'fbRanks' model into a fbRanks object
fitter =
apply(dates, 1, function(x){rank.teams(games, max.date = x )}) %>%
coef()
fitter =
apply(dates, 1, function(x){rank.teams(games, max.date = x , silent = TRUE)}) %>%
as.tibble()
fitter
fitter =
apply(dates, 1, function(x){rank.teams(games, max.date = x , silent = TRUE)}) %>%
as_tibble()
fitter =
apply(dates, 1, function(x){rank.teams(games, max.date = x , silent = TRUE)})
fitter =
apply(dates, 1, function(x){c(x, rank.teams(games, max.date = x , silent = TRUE))})
fitter = list( dates = dates, fits = apply(dates, 1, function(x){c(x, rank.teams(games, max.date = x , silent = TRUE))}))
fitter %>% as.data.frame()
fitter %>% as_tibble()
fitter = data.frame( dates = dates, fits = apply(dates, 1, function(x){c(x, rank.teams(games, max.date = x , silent = TRUE))}))
fitter =
apply(dates, 1, function(x){c(x, rank.teams(games, max.date = x , silent = TRUE))})
tibble(dates, fits = apply(dates, 1, function(x){rank.teams(games, max.date = x , silent = TRUE)}))
tibble(as.list(dates), fits = apply(dates, 1, function(x){rank.teams(games, max.date = x , silent = TRUE)}))
tibble(dates = as.list(dates), fits = apply(dates, 1, function(x){rank.teams(games, max.date = x , silent = TRUE)}))
test = tibble(as.list(dates), fits = apply(dates, 1, function(x){rank.teams(games, max.date = x , silent = TRUE)}))
source('~/git/tfmkt-parser/analyser/run_analysis.R')
install.packages('foo')
install.packages('zoo')
source('~/git/tfmkt-parser/analyser/run_analysis.R')
install.packages('RMySQL')
source('~/git/tfmkt-parser/analyser/run_analysis.R')
source('~/git/tfmkt-parser/analyser/run_analysis.R')
install.packages('RMySQL')
source('~/git/tfmkt-parser/analyser/run_analysis.R')
install.packages('fbRanks')
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
movingAverages =
# Top = 1000 actually bring in all players, since La Liga has around 350 different players
# Past = 1 means every player with at least 1 game played
consolidateTopN(data, top = 1000, past = 1) #%>%
View(movingAverages)
View(movingAverages)
# Module the raw data into a dataframe that can be the input to the rank.teams function
games =
# From a season data dataframe (full 'appearances' table from the database)
unnest(movingAverages) %>%
group_by(`_DATE_`, `_GID_`) %>%
# I beleive this call to distinct is not really necessary
distinct() %>%
# Create the columns date, home.team, away.team and scores as they are
# expected in the fbRanks.rank_teams function
mutate(
date = as.Date(`_DATE_`, format="%Y-%m-%d"),
home.team = `_HT_`, home.score = `_GSH_`,
away.team = `_AT_`, away.score = `_GSA_`) %>%
# Take only the first row, since we are interested in the score of the
# game this is enough
filter(row_number() == 1) %>%
# Remove the grouping
ungroup() %>% ungroup() %>%
# order rows by date
arrange(desc(date)) %>%
# Drop unnecesary rows
select(date, home.team, home.score, away.team, away.score)
games
dates
# Fits the 'fbRanks' model into a fbRanks object
fitter =
apply(dates, 1, function(x){rank.teams(games, max.date = x , silent = TRUE)})
fitter
View(fitter)
View(fitter)
fitted = rank.teams(games)
coef.list = coef(fitted)$coef.list
coef.list
coef.list$cluster.1
coef.list$cluster.1$attack
coef.list$cluster.1$attack %>% as.data.frame()
data.frame(attack = coef.list$cluster.1$attack, defense = coef.list$cluster.1$defense)
coef.list$cluster.1$defense
coef.list$cluster.1$defend
data.frame(attack = coef.list$cluster.1$attack, defense = coef.list$cluster.1$defend)
data.frame(attack = fitted$coef.list$cluster.1$attack, defense = fitted$coef.list$cluster.1$defend)
fitted$fit$cluster.1$coefficients
data.frame(attack = coef.list$cluster.1$attack, defense = fitted$coef.list$cluster.1$defend)
data.frame(attack = coef.list$cluster.1$attack, defense = coef.list$cluster.1$defend)
fitted
fitter[[67]]
fitter[[1]]
dates
fitter[[90]]
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
fitted
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
data.frame(attack = coef.list$cluster.1$attack, defense = fitted$coef.list$cluster.1$defend)
coef.list = coef(fitted[[1]])$coef.list
data.frame(attack = coef.list$cluster.1$attack, defense = fitted$coef.list$cluster.1$defend)
coef.list
data.frame(uno = c(1,2), dos = (3,4))
data.frame(uno = c(1,2), dos = c(3,4))
data.frame(uno = c(1,2), dos = c(3,4), tres = 'A')
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
rbind(fitted)
binded = rbind(fitted)
fitted =
sapply(dates, 1, function(x){fit_games(games, x)})
fitted = sapply(dates, 1, function(x){fit_games(games, x)})
fitted = sapply(dates, function(x){fit_games(games, x)})
date = as.Date(`_DATE_`, format="%Y-%m-%d"),
home.team = `_HT_`, home.score = `_GSH_`,
away.team = `_AT_`, away.score = `_GSA_`) %>%
# Take only the first row, since we are interested in the score of the
# game this is enough
filter(row_number() == 1) %>%
# Remove the grouping
ungroup() %>% ungroup() %>%
# order rows by date
arrange(desc(date)) %>%
# Drop unnecesary rows
select(date, home.team, home.score, away.team, away.score)
fitted =
apply(dates, 1, function(x){fit_games(games, x)})
unlist(fitted)
mydata = unlist(fitted)
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
res = ldply(fitted)
library(plyr)
res = ldply(fitted)
res
fitted =
apply(dates, 1, function(x){fit_games(games, x)})
fitted[[2]]
res = fitted[[2]]
names(res)
names(res) <- c("name", "attack", "defense". "max_date")
names(res) <- c("name", "attack", "defense", "max_date")
rownames_to_column(res)
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
fitted
View(fitted)
View(fitted)
fitted %>% filter(name == 'fc-barcelona')
fitted %>% filter(name == 'fc-barcelona') %>% arrange( desc(max_date))
fitted %>% filter(name == 'celta-vigo') %>% arrange( desc(max_date))
fitted %>% filter(max_date = '2018-04-28') %>% arrange( desc(attack))
fitted %>% filter(max_date == '2018-04-28') %>% arrange( desc(attack))
fitted %>% filter(max_date == '2018-04-28') %>% arrange( asc(defense))
fitted %>% filter(max_date == '2018-04-28') %>% arrange( defense)
fitted %>% filter(max_date < '2017-10-28') %>% arrange( desc(attack))
fitted %>% filter(max_date == '2017-10-16') %>% arrange( desc(attack))
fitted %>% filter(name == 'fc-barcelona') %>% arrange( desc(max_date))
movingAverages
unnest(movingAverages)
unnest(movingAverages) %>% select(`_CNAME_`)
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
unnest(movingAverages) %>% select(`_CNAME_`)
unnest(movingAverages) %>% select(`_PNAME_`, `_CNAME_`, `_DATE_`, `_POS_`, `_S_` )
unnest(movingAverages) %>% select(`_PNAME_`, `_CNAME_`, `_DATE_`, `_POS_`, score )
unnest(movingAverages) %>% left_join(ratings, by = c("_CNAME_", "name"))
ratings
unnest(movingAverages) %>% left_join(ratings, by = c("_CNAME_" = "name"))
unnest(movingAverages) %>% left_join(ratings, by = c("_CNAME_" = "name" & "_DATE_" = "max_date"))
unnest(movingAverages) %>% left_join(ratings, by = c("_CNAME_" = "name" &$ "_DATE_" = "max_date"))
unnest(movingAverages) %>% left_join(ratings, by = c("_CNAME_" = "name" && "_DATE_" = "max_date"))
unnest(movingAverages) %>% left_join(ratings, by = c("_CNAME_" = "name", "_DATE_" = "max_date"))
unnest(movingAverages)
unnest(movingAverages) %>% left_join(ratings, by = c("_CNAME_" = "name", "_DATE_" = "max_date"))
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
View(joined)
View(joined)
View(movingAverages)
View(joined)
View(joined)
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
View(joined)
View(joined)
source('~/git/tfmkt-parser/analyser/create_ratediff_column.R')
joined %>% filter(`_PNAME_` = 'lionel-messi')
joined %>% filter(`_PNAME_` == 'lionel-messi')
joined %>% filter(`_PNAME_` == 'lionel-messi') %>% view()
some = joined %>% filter(`_PNAME_` == 'lionel-messi')
View(some)
View(some)
# Classification Tree with rpart
library(rpart)
fit = rpart(scores.real.ary ~ `_POS_` + attack + `_H_`)
fit = rpart(`_GS_` ~ `_POS_` + attack + `_H_`)
fit = rpart(scores.real.ary ~ `_POS_` + attack + `_H_`, data = joined)
fit
printcp(fit) # display the results
summary(fit) # detailed summary of splits
joined =
unnest(movingAverages) %>%
mutate(`_ANAME_` = ifelse(`_H_`, `_AT_`, `_HT_`)) %>%
left_join(fitted, by = c("_CNAME_" = "name", "_DATE_" = "max_date"), suffix = c(".my_team")) %>%
left_join(fitted, by = c("_ANAME_" = "name", "_DATE_" = "max_date"), suffix = c(".their_team")) %>%
mutate(attack.gain = attack.my_team - defense.their_team, defense.gain = defense.my_team + attack.their_team)
joined =
unnest(movingAverages) %>%
mutate(`_ANAME_` = ifelse(`_H_`, `_AT_`, `_HT_`)) %>%
left_join(fitted, by = c("_CNAME_" = "name", "_DATE_" = "max_date")) %>%
left_join(fitted, by = c("_ANAME_" = "name", "_DATE_" = "max_date"), suffix = c(".my_team", ".their_team")) %>%
mutate(attack.gain = attack.my_team - defense.their_team, defense.gain = defense.my_team + attack.their_team)
View(joined)
View(joined)
fit = rpart(scores.real.ary ~ `_POS_` + attack.gain + `_H_`, data = joined)
summary(fit) # detailed summary of splits
fit = rpart(scores.real.ary ~ `_POS_` + attack.gain + `_H_`, method = "class", data = joined)
fit
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
fit = rpart(scores.real.ary ~ `_POS_` + attack.gain + `_H_`, method = "anova", data = joined)
fit
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
fit = rpart(scores.real.ary ~ `_POS_` + attack.gain + `_H_`, method = "anova", data = joined %>% filter(`_POS_` == 4))
fit
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
fit = rpart(scores.real.ary ~ `_POS_` + defense.gain + `_H_`, method = "anova", data = joined %>% filter(`_POS_` == 2))
fit
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
